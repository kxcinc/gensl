a [message unit] always ends in EOT

3bit:5bit
3bit -> 0..7
5bit -> 0..31

0: -> (tbd)
1: -> Boolean Atom + Short Natural Number
2: -> Shorthand Symbol Atom
3: -> Symbol Atom
4: -> String Atom
5: -> Bytes Atom
6: -> Numeric Atom \notin 0..29
7: -> Form

0:4 -> EOT

1:0..29 -> Numeric Atom of 0..29
1:30 -> boolean false
1:31 -> boolean true

!version !uuid
2:0..1

!list !vector !set !map
2:2..5

!int !uint !float !complex
2:6..9

!passphrase
!plaintext !ciphertext
!envelop !mac !hash !sig
!symkey !mackey !pubkey !privkey !keypair
2:10..21

!!appsymb(0..9)
2:22..31

3:(n=1..31) [n bytes]  -> symbol of [n bytes]  <n=1..31; oh=1>
3:0 n=32..255 [n bytes] -> symbol of [n bytes] <n=32..255; oh=2>
3:0 k=2..31 (n=[k bytes]>255) [n bytes] -> symbol of [n bytes] <n=256..(256^31-1); oh=2+k<33>
3:0 0 -> null-symbol <n=0; oh=2>

4:(n=0..30) [n bytes]  -> string of [n bytes]  <n=0..30; oh=1>
4:31 n=31..255 [n bytes] -> string of [n bytes] <n=31..255; oh=2>
4:31 k=2..30 (n=[k bytes]>255) [n bytes] -> string of [n bytes] <n=256..(256^30-1); oh=2+k<32>
(same for 5:_)

6:(n=0..29) (num=[String Atom]) [n bytes] -> num, [n bytes] as suffix
6:30 30..255 -> number 30..255
6:31 [2bytes] -> number of [2bytes], interpreted as 2's complement signed integer
6:32 [4bytes] -> number of [4bytes], interpreted as 2's complement signed integer
6:30 (k=0..29) [(k/2+1)bytes] -> number of [(k/2+1)bytes], interpreted as unsigned integer,
                                 positive if 2 divides k and negative if otherwise.
				 this could represent +-(256^15-1)
sz=1, oh=0 ==> 0..29
sz=2, oh=1 ==> 30..255
sz=3, oh=1 ==> int16
sz=5, oh=1 ==> int32
sz=?, oh=2 ==> +-(256^15-1)
sz=10, oh=2 ==> >int64
sz=18, oh=2 ==> >int128

7:0 -> empty form
7:1..16 -> shorthand-bytes form
head shorthand symbol + bytes atom having 1..16 bytes of data

always put keyword nodes before positional nodes, except for the head-node;
keyword nodes should be all sorted

7:(n=17..30) [(n-16)-nodes] -> form of [(n-16)-nodes] <maxnodes=14>
7:31 (k=1..14) (n=[k-bytes]) [n-nodes] -> form of [n-nodes] <maxnodes=256^14-1>
7:31 (n=15..255) [n-nodes] -> form of [n-nodes] <maxnodes=255>
oh=1 ==> nodecount<=14
oh=2 ==> nodecount<=255
oh=2+k ==> nodecount<=256^14-1

!! 0:? all nodes are true-value keyword (esp for set)
!! 0:? 7:1..16 to keyword node

e.g. (int int32:775), (uint int32:669)
